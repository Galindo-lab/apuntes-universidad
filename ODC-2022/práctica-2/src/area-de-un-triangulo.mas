
/ ESCRIBA UN PROGRAMA QUE CONTENGA LA SUBRUTINA AREATRIANGULO,
/ LA CUAL RECIBE DOS NÚMEROS EN LAS VARIABLES B Y H, QUE
/ REPRESENTAN LA BASE Y LA ALTURA DE UN TRIÁNGULO,
/ RESPECTIVAMENTE, Y ALMACENA EN LA VARIABLE A EL ÁREA DEL
/ TRIÁNGULO. EN EL CÓDIGO PRINCIPAL, SOLICITE AL USUARIO DOS
/ NÚMEROS Y DESPLIEGUE EL ÁREA DE UN TRIÁNGULO CALCULADA CON LOS
/ DATOS INGRESADOS. REALICE CAPTURAS DE PANTALLA DONDE SE
/ MUESTRE EL FUNCIONAMIENTO DE LOS PROGRAMAS.

/ INICIO DEL PROGRAMA ------------------------------------------
INPUT
STORE VAR-ALTURA              / CAPTURA LA ALTURA
OUTPUT

INPUT 
STORE VAR-BASE                / CAPTURA LA BASE
OUTPUT

/ MULTIPLICACIÓN -----------------------------------------------

STORE VAR-ITERADOR            / EL ITERADOR DETERMINA CUANTAS
                              / VECES SE SUMARA ALTURA
JNS SUB-MULT-ALTURA
LOAD VAR-ACUMULADOR           / CARGAR EL RESULTADO DE LA
                              / MULTIPLICACIÓN

STORE VAR-DIVIDENDO           / GUARDAR EL VALOR EN EL DIVIDENDO
OUTPUT

/ REINICIAR LAS VARIABLES --------------------------------------
LOAD CONS-CERO                
STORE VAR-ITERADOR
STORE VAR-ACUMULADOR

/ DIVISION ENTRE DOS -------------------------------------------
JNS SUB-DIV-DOS               / NO OCUPAMOS CARGAR EL VALOR DEL 
                              / DIVIDENDO, YA QUE LO GUARDAMOS
                              / ANTES
LOAD VAR-ITERADOR
OUTPUT

HALT / FINAL DEL PROGRAMA --------------------------------------

/ SUBRUTINA MULTIPLICACIÓN -------------------------------------
SUB-MULT-ALTURA, HEX 000      / SUMA "VAR-ALTURA" LA CANTIDAD DE
                              / VECES QUE DIGA "VAR-ITERADOR" Y
                              / LO ALMACENA EN "VAR-ACUMULADOR"

ADD CONS-UNO                  / INCREMENTAR EN 1 A
                              / "VAR-ITERADOR", ESTO SIMPLIFICA
                              / LA LÓGICA DEL SKIPCOND, PARA QUE
                              / SOLO SALTE SI AC ES MAYOR A 0
STORE VAR-ITERADOR

X-MULT-ALTURA-INI, LOAD VAR-ITERADOR
    SUBT CONS-UNO             / RESTAR UNO AL ACUMULADOR 
      
    SKIPCOND 800              / DETENER LA ITERACIÓN SI AC ES
    JUMPI SUB-MULT-ALTURA     / MAYOR A 0
    
         
    STORE VAR-ITERADOR        / ALMACENA EL ITERADOR PARA LA
                              / SIGUIENTE ITERACION 
    LOAD VAR-ACUMULADOR       / CARGA EL ACUMULADOR
    ADD VAR-ALTURA            / SUMA "VAR-ALTURA"
       STORE VAR-ACUMULADOR   / LO ALMACENA EN "VAR-ACUMULADOR"
                              / Y REPITE HASTA QUE
                              / "VAR-ITERADOR" ES 0
    JUMP X-MULT-ALTURA-INI

/ SUBRUTINA DIVISIÓN -------------------------------------------
SUB-DIV-DOS, HEX 000          / DIVISIÓN ENTERA DE
                              / "VAR-DIVIDENDO" ENTRE DOS Y LO
                              / ALMACENA EN "VAR-ITERADOR"

X-DIV-DOS-INI, LOAD VAR-DIVIDENDO 
    SUBT CONS-DOS             / SE RESTA 2 DE "VAR-DIVIDENDO"
    SKIPCOND 800              / SI EL RESULTADO DE LA RESTA ES
    JUMP X-DIV-DOS-TERMINA    / MAYOR A 0 CONTINUA ITERANDO

X-DIV-DOS-INC-ITN, STORE VAR-DIVIDENDO
    LOAD VAR-ITERADOR
    ADD CONS-UNO              / INCREMENTA EL ITINERADOR
    STORE VAR-ITERADOR
    JUMP X-DIV-DOS-INI    

/ SI LA DIVISIÓN ES EXACTA SE REPITE EL SUBPROCESO PARA
/ INCREMENTAR EL ITERADOR, AL TERMINAR ESE SUBPROCESO REGRESA
/ AL INICIO DE "SUB-DIV-DOS" ENTONCES SE VUELVE A RESTAR 2 AL
/ DIVIDENDO Y AHORA EL NUMERO ES MENOR A 0 Y DIFERENTE A 0 Y
/ AHORA SI TERMINA EL SUBPROCESO "SUB-DIV-DOS"

X-DIV-DOS-TERMINA, SKIPCOND 400
    JUMPI SUB-DIV-DOS 
    JUMP X-DIV-DOS-INC-ITN

/ CONSTANTES ---------------------------------------------------
CONS-CERO, DEC 0
CONS-UNO, DEC 1
CONS-DOS, DEC 2

/ VARIABLES ----------------------------------------------------
VAR-BASE, DEC 0
VAR-ALTURA, DEC 0
VAR-ITERADOR, DEC 0 
VAR-ACUMULADOR, DEC 0
VAR-DIVIDENDO, DEC 0