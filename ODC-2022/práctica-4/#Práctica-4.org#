
#+TITLE:  Aritmética Binaria
#+AUTHOR: Luis Eduardo Galindo Amaya (1274895)
#+DATE:   2022-09-13

#+MACRO:  tagline    Práctica 4
#+include: "../includes/template.org"

* Objetivo
El alumno aplicará los conocimientos adquiridos en clase para resolver ejercicios de problemas aritméticos en el sistema binario.

* Equipo
Calculadora con capacidad de realizar operaciones aritméticas binarias.
\pagebreak

* Desarrollo 
** 1. Realice las siguientes sumas binarias (8 bits). Muestre el procedimiento utilizado:
*** a. 35 + 10
#+BEGIN_SRC 
              1
   35:  0010'0011
+  10:  0000'1010
  ----------------
   45:  0010'1101
#+END_SRC

*** b. 23 + 17 
#+BEGIN_SRC 
          11 111
   23:  0001'0111 
+  27:  0001'1011 
  ------------------
   50:  0011'0010
#+END_SRC

*** c. -54 + 36
#+BEGIN_SRC
|---------+-----------+---------------+---------------|
| Decimal | Binario   | Complemento 1 | Complemento 2 |
|---------+-----------+---------------+---------------|
|      54 | 0011'0110 | 1100'1001     | 1100'1010     |
|      18 | 0001'0010 | 1110'1101     | 1110'1110     |
|---------+-----------+---------------+---------------| 

  -54:  1100'1010
+  36:  0010'0100
  ------------------
  -18:  1110 1110
#+END_SRC

*** d. 78 + 50
#+BEGIN_SRC 
        1111 11
   78:  0100'1110 
+  50:  0011'0010 
  ------------------
  128:  1000'0000
#+END_SRC

** 2. Realice las siguientes restas binarias con cifras con signo representadas con la representación complemento a 2 (8 bits). Muestre el procedimiento utilizado:
*** a. -75 - 25
#+BEGIN_SRC
|---------+-----------+----------------+----------------|
| Decimal | Binario   | Complemento 1  | Complemento 2  |
|---------+-----------+----------------+----------------|
|      75 | 0100'1011 | 1011'0100      | 1011'0101      |
|      25 | 0001'1001 | 1110'0110      | 1110'0111      |
|---------+-----------+----------------+----------------|

|---------------+---------------+-------------+---------|
| Complemento 2 | Complemento 1 | Binario     | Decimal |
|---------------+---------------+-------------+---------|
| 1'1001'1100   | 1'1001'1011   | 0 0110 0100 |     100 |
|               |               |             |         |
|---------------+---------------+-------------+---------|

           Overflow                  No Overflow
 
              11   111                     02 2    
       -75:   1011'0101           -75:   1011'0101             
    +  -25:   1110'0111        -   25:   0001'1001 
      ------------------         ------------------    
      -100: 1'1001'1100          -100:   1001'1100
#+END_SRC

*** b. 78 - 50
#+BEGIN_SRC 
|---------+-----------+---------------+---------------|
| Decimal | Binario   | Complemento 1 | Complemento 2 |
|---------+-----------+---------------+---------------|
|      78 | 0011'0010 |     1100'1101 |      11001110 |
|---------+-----------+---------------+---------------|
 
              1  1 11
        78:   0100'1110    
    +  -50:   1100'1110
      ------------------      
        28: 1'0001'1100
#+END_SRC

*** c. -92 – 40
#+BEGIN_SRC
|---------+-----------+---------------+---------------|
| Decimal | Binario   | Complemento 1 | Complemento 2 |
|---------+-----------+---------------+---------------|
|      92 | 0101'1100 | 1010'0011     | 1010'0100     |
|      40 | 0010'1000 | 1101'0111     | 1101'1000     |
|---------+-----------+---------------+---------------| 

|---------------+---------------+-----------+---------|
| Complemento 2 | Complemento 1 | Binario   | Decimal |
|---------------+---------------+-----------+---------|
| 1'0111'1100   | 1'0111'1011   | 1000'0100 |     132 |
|---------------+---------------+-----------+---------|

              1       
       -92:   1010'0100
    +  -40:   1101'1000 
      ------------------      
      -132: 1'0111'1100
#+END_SRC

*** d. 62 – 36
#+BEGIN_SRC 
|---------+-----------+---------------+---------------|
| Decimal | Binario   | Complemento 1 | Complemento 2 |
|---------+-----------+---------------+---------------|
|      36 | 0010'0100 |     1101'1011 |     1101'1100 |
|---------+-----------+---------------+---------------|
 
              1111 1
        62:   0011'1110 
    +  -36:   1101'1100
      ------------------      
        26: 1'0001'1010
#+END_SRC

** 3. Realice las siguientes operaciones aritméticas sobre números hexadecimales., Muestre el procedimiento utilizado:
*** a. 12h + 78h
#+BEGIN_SRC 
   18:  12
+ 120:  78
 ----------
  138:  8A
#+END_SRC

*** b. F5h – D8h
#+BEGIN_SRC 
  245:  F5
+ 216:  D8
 ----------
  461: 1CD
#+END_SRC

** 4. Realice las siguientes multiplicaciones y divisiones con números binarios.
*** a. 25*3
#+BEGIN_SRC 
25:  0001 1001
 3:  0000 0011
--------------
     0001 1001
...0 0011 001.
---------------
75:  0100 1011  
#+END_SRC

*** b. 75/5
#+BEGIN_SRC 
          1111                 02           0222
     +------------             1001         1000
 101 | 1001011               -  101       -  101  
        101                   ------       ------    
     -------------              100         0011
        1000
         101
     -------------
         0111                  1
          101                  2
     -------------             4
          0101              +  8
           101               ----
     -------------            15 
           000
#+END_SRC

** 5. Realice las siguientes conversiones de decimal a representación de punto flotante en precisión simple.
*** a. 200.09375
**** Decimal a binario
#+BEGIN_SRC 
200 = 11001000

0.09375 * 2 = 0.1875 | 0
0.1875  * 2 = 0.375  | 0
0.75    * 2 = 1.5    | 1
0.5     * 2 = 1      | 1

0.09375 = .0011

-------------------------

200.09375 = 11001000.0011
#+END_SRC

**** Desplazamiento a la izquierda
#+BEGIN_SRC
1 < 1100100.00011
2 < 110010.000011
3 < 11001.0000011
4 < 1100.10000011
5 < 110.010000011
6 < 11.0010000011
7 < 1.10010000011
#+END_SRC

**** bias:
7 + 127 = 134

**** exponente:
bin(134) = 10000110 

**** matiza:
1.10010000011 = [ 10010000011 ]

**** matiza decimal
|-----+------+------+------+------+------+------+------+------+------+-------+-------|
| 2^0 | 2^-1 | 2^-2 | 2^-3 | 2^-4 | 2^-5 | 2^-6 | 2^-7 | 2^-8 | 2^-9 | 2^-10 | 2^-11 |
|-----+------+------+------+------+------+------+------+------+------+-------+-------|
|   1 |    1 |    0 |    0 |    1 |    0 |    0 |    0 |    0 |    0 |     1 |     1 |
|-----+------+------+------+------+------+------+------+------+------+-------+-------|

|1 + 2^-1 + 2^-4 + 2^-10 + 2^-11 = 1.56396484375|

**** binario
|-------+-----------+------------------------------|
| signo | exponente | matiza                       |
|-------+-----------+------------------------------|
|     0 | 1000 0110 | 1001 0000 0011 0000 0000 000 |
|-------+-----------+------------------------------|

** 6. Realice las siguientes conversiones de representación de punto flotante en precisión simple a decimal.
*** a. 10111100010001110001110000000000
|-------+-----------+-------------------------|
| signo | Exponente |                  Matiza |
|-------+-----------+-------------------------|
|     1 |  01111000 | 10001110001110000000000 |
|-------+-----------+-------------------------|

**** Exponente
#+BEGIN_SRC 
01111000 = 120

 x + 127 = 120 
       x = 120 - 127
       x = -7
#+END_SRC

**** Matiza
#+BEGIN_SRC python :exports both
  matiza = "10001110001110000000000"
  a = [ 2**(-(i+1)) for i,v in enumerate(matiza) if v=='1' ]
  return sum(a)
#+END_SRC

#+RESULTS:
: 0.5555419921875

**** Conversión 
\[
-1 \times 2^{-7} \times (1+0.5555419921875) = -0.012152671813964844
\]

** 7. Realice las siguientes conversiones de BCD a Decimal y de Decimal a BCD., Muestre el procedimiento utilizado:
*** a. 1001-0111-1000-0001
#+BEGIN_SRC 
1001-0111-1000-0001
   9    7    8    1
#+END_SRC

*** b. 0010-1011-1000-0011
#+BEGIN_SRC 
0010-1011-1000-0011
   2   11    8    3
#+END_SRC

- El BCD es incorrecto :: para que un valor sea valido tiene que estar en el rango [0-9], '11' esta fuera del rango, por lo que no puede representar el numero en decimal correspondiente.

*** c. 9578
#+BEGIN_SRC 
   9    5    7    8
1001-0101-0111-1000 
#+END_SRC

*** d. 2136
#+BEGIN_SRC 
   2    1    3    6
0010-0001-0011-0110
#+END_SRC

* Conclusiones y comentarios
Las diferentes representaciones de los números son muy útiles para representar entidades mas complejas o cosas donde otra propiedad del objeto es mas importante que su valor, por ejemplo un bitfield es muy complicado de escribir de manera manual pero como se puede representar el binario ya que lo único que nos interesa es su posición:

** Ejmplo
#+BEGIN_SRC 
  16  8   4   2   1   DEC 
|---+---+---+---+---+-----|
| .   .   .   .   . |   0 |
|---+---+---+---+---+-----|
| .   1   .   1   . |  10 |
|---+---+---+---+---+-----|
| .   .   .   .   . |   0 |
|---+---+---+---+---+-----|
| 1   .   .   .   1 |  17 |
|---+---+---+---+---+-----|
| .   1   1   1   . |  14 |
|---+---+---+---+---+-----|
| .   .   .   .   . |   0 |
|---+---+---+---+---+-----|

Toda esta matriz binaria se puede representar como: [0,A,0,11,E,0]
#+END_SRC
